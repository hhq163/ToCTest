// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserLogin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserLogin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace yunquan {

void protobuf_ShutdownFile_UserLogin_2eproto() {
  delete UserLogin::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_UserLogin_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_UserLogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::yunquan::protobuf_AddDesc_Common_2eproto();
  UserLogin::default_instance_ = new UserLogin();
  UserLogin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserLogin_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_UserLogin_2eproto_once_);
void protobuf_AddDesc_UserLogin_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_UserLogin_2eproto_once_,
                 &protobuf_AddDesc_UserLogin_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserLogin_2eproto {
  StaticDescriptorInitializer_UserLogin_2eproto() {
    protobuf_AddDesc_UserLogin_2eproto();
  }
} static_descriptor_initializer_UserLogin_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int UserLogin::kClientTypeFieldNumber;
const int UserLogin::kClientIdFieldNumber;
const int UserLogin::kClientSecretFieldNumber;
const int UserLogin::kSessionIdFieldNumber;
#endif  // !_MSC_VER

UserLogin::UserLogin()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yunquan.UserLogin)
}

void UserLogin::InitAsDefaultInstance() {
}

UserLogin::UserLogin(const UserLogin& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yunquan.UserLogin)
}

void UserLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clienttype_ = 0;
  clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientsecret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogin::~UserLogin() {
  // @@protoc_insertion_point(destructor:yunquan.UserLogin)
  SharedDtor();
}

void UserLogin::SharedDtor() {
  if (clientid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientid_;
  }
  if (clientsecret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientsecret_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserLogin& UserLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserLogin_2eproto();
#endif
  return *default_instance_;
}

UserLogin* UserLogin::default_instance_ = NULL;

UserLogin* UserLogin::New() const {
  return new UserLogin;
}

void UserLogin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserLogin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(clienttype_, sessionid_);
    if (has_clientid()) {
      if (clientid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientid_->clear();
      }
    }
    if (has_clientsecret()) {
      if (clientsecret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientsecret_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:yunquan.UserLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .yunquan.E_CLIENT_TYPE clientType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::yunquan::E_CLIENT_TYPE_IsValid(value)) {
            set_clienttype(static_cast< ::yunquan::E_CLIENT_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_clientId;
        break;
      }

      // required string clientId = 2;
      case 2: {
        if (tag == 18) {
         parse_clientId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_clientSecret;
        break;
      }

      // required string clientSecret = 3;
      case 3: {
        if (tag == 26) {
         parse_clientSecret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientsecret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sessionId;
        break;
      }

      // optional uint32 sessionId = 4;
      case 4: {
        if (tag == 32) {
         parse_sessionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yunquan.UserLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yunquan.UserLogin)
  return false;
#undef DO_
}

void UserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yunquan.UserLogin)
  // required .yunquan.E_CLIENT_TYPE clientType = 1;
  if (has_clienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->clienttype(), output);
  }

  // required string clientId = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientid(), output);
  }

  // required string clientSecret = 3;
  if (has_clientsecret()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientsecret(), output);
  }

  // optional uint32 sessionId = 4;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:yunquan.UserLogin)
}

int UserLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .yunquan.E_CLIENT_TYPE clientType = 1;
    if (has_clienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clienttype());
    }

    // required string clientId = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // required string clientSecret = 3;
    if (has_clientsecret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientsecret());
    }

    // optional uint32 sessionId = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserLogin*>(&from));
}

void UserLogin::MergeFrom(const UserLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clienttype()) {
      set_clienttype(from.clienttype());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_clientsecret()) {
      set_clientsecret(from.clientsecret());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserLogin::CopyFrom(const UserLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserLogin::Swap(UserLogin* other) {
  if (other != this) {
    std::swap(clienttype_, other->clienttype_);
    std::swap(clientid_, other->clientid_);
    std::swap(clientsecret_, other->clientsecret_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserLogin::GetTypeName() const {
  return "yunquan.UserLogin";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace yunquan

// @@protoc_insertion_point(global_scope)
