// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupUserListGetAck.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GroupUserListGetAck.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace yunquan {

void protobuf_ShutdownFile_GroupUserListGetAck_2eproto() {
  delete GroupUserListGetAck::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_GroupUserListGetAck_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_GroupUserListGetAck_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GroupUserListGetAck::default_instance_ = new GroupUserListGetAck();
  GroupUserListGetAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GroupUserListGetAck_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_GroupUserListGetAck_2eproto_once_);
void protobuf_AddDesc_GroupUserListGetAck_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_GroupUserListGetAck_2eproto_once_,
                 &protobuf_AddDesc_GroupUserListGetAck_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GroupUserListGetAck_2eproto {
  StaticDescriptorInitializer_GroupUserListGetAck_2eproto() {
    protobuf_AddDesc_GroupUserListGetAck_2eproto();
  }
} static_descriptor_initializer_GroupUserListGetAck_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GroupUserListGetAck::kSessionIdFieldNumber;
const int GroupUserListGetAck::kUidFieldNumber;
#endif  // !_MSC_VER

GroupUserListGetAck::GroupUserListGetAck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yunquan.GroupUserListGetAck)
}

void GroupUserListGetAck::InitAsDefaultInstance() {
}

GroupUserListGetAck::GroupUserListGetAck(const GroupUserListGetAck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yunquan.GroupUserListGetAck)
}

void GroupUserListGetAck::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupUserListGetAck::~GroupUserListGetAck() {
  // @@protoc_insertion_point(destructor:yunquan.GroupUserListGetAck)
  SharedDtor();
}

void GroupUserListGetAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupUserListGetAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupUserListGetAck& GroupUserListGetAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GroupUserListGetAck_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GroupUserListGetAck_2eproto();
#endif
  return *default_instance_;
}

GroupUserListGetAck* GroupUserListGetAck::default_instance_ = NULL;

GroupUserListGetAck* GroupUserListGetAck::New() const {
  return new GroupUserListGetAck;
}

void GroupUserListGetAck::Clear() {
  sessionid_ = 0;
  uid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GroupUserListGetAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:yunquan.GroupUserListGetAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sessionId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // repeated int32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_uid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_uid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yunquan.GroupUserListGetAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yunquan.GroupUserListGetAck)
  return false;
#undef DO_
}

void GroupUserListGetAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yunquan.GroupUserListGetAck)
  // required int32 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sessionid(), output);
  }

  // repeated int32 uid = 2;
  for (int i = 0; i < this->uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->uid(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:yunquan.GroupUserListGetAck)
}

int GroupUserListGetAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

  }
  // repeated int32 uid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->uid(i));
    }
    total_size += 1 * this->uid_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupUserListGetAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupUserListGetAck*>(&from));
}

void GroupUserListGetAck::MergeFrom(const GroupUserListGetAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  uid_.MergeFrom(from.uid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GroupUserListGetAck::CopyFrom(const GroupUserListGetAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUserListGetAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupUserListGetAck::Swap(GroupUserListGetAck* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    uid_.Swap(&other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupUserListGetAck::GetTypeName() const {
  return "yunquan.GroupUserListGetAck";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace yunquan

// @@protoc_insertion_point(global_scope)
