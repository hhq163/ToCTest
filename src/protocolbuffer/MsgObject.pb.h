// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgObject.proto

#ifndef PROTOBUF_MsgObject_2eproto__INCLUDED
#define PROTOBUF_MsgObject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace yunquan {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MsgObject_2eproto();
void protobuf_AssignDesc_MsgObject_2eproto();
void protobuf_ShutdownFile_MsgObject_2eproto();

class MsgObjSystem;
class MsgObjText;
class MsgObjImage;
class MsgObjVoice;
class MsgObjVideo;
class MsgObjLink;
class MsgObjCard;
class MsgObjActivity;

enum E_MSG_OBJECT_TYPE {
  MOT_UNKNOWN = 0,
  MOT_SYSTEM = 1,
  MOT_TEXT = 2,
  MOT_IMAGE = 3,
  MOT_VOICE = 4,
  MOT_VIDEO = 5,
  MOT_LINK = 6,
  MOT_CARD = 7,
  MOT_ACTIVITY = 8
};
bool E_MSG_OBJECT_TYPE_IsValid(int value);
const E_MSG_OBJECT_TYPE E_MSG_OBJECT_TYPE_MIN = MOT_UNKNOWN;
const E_MSG_OBJECT_TYPE E_MSG_OBJECT_TYPE_MAX = MOT_ACTIVITY;
const int E_MSG_OBJECT_TYPE_ARRAYSIZE = E_MSG_OBJECT_TYPE_MAX + 1;

// ===================================================================

class MsgObjSystem : public ::google::protobuf::MessageLite {
 public:
  MsgObjSystem();
  virtual ~MsgObjSystem();

  MsgObjSystem(const MsgObjSystem& from);

  inline MsgObjSystem& operator=(const MsgObjSystem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const MsgObjSystem& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgObjSystem* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgObjSystem* other);

  // implements Message ----------------------------------------------

  MsgObjSystem* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgObjSystem& from);
  void MergeFrom(const MsgObjSystem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:yunquan.MsgObjSystem)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  ::google::protobuf::int32 type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MsgObject_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MsgObject_2eproto();
  #endif
  friend void protobuf_AssignDesc_MsgObject_2eproto();
  friend void protobuf_ShutdownFile_MsgObject_2eproto();

  void InitAsDefaultInstance();
  static MsgObjSystem* default_instance_;
};
// -------------------------------------------------------------------

class MsgObjText : public ::google::protobuf::MessageLite {
 public:
  MsgObjText();
  virtual ~MsgObjText();

  MsgObjText(const MsgObjText& from);

  inline MsgObjText& operator=(const MsgObjText& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const MsgObjText& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgObjText* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgObjText* other);

  // implements Message ----------------------------------------------

  MsgObjText* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgObjText& from);
  void MergeFrom(const MsgObjText& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:yunquan.MsgObjText)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  ::google::protobuf::int32 type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MsgObject_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MsgObject_2eproto();
  #endif
  friend void protobuf_AssignDesc_MsgObject_2eproto();
  friend void protobuf_ShutdownFile_MsgObject_2eproto();

  void InitAsDefaultInstance();
  static MsgObjText* default_instance_;
};
// -------------------------------------------------------------------

class MsgObjImage : public ::google::protobuf::MessageLite {
 public:
  MsgObjImage();
  virtual ~MsgObjImage();

  MsgObjImage(const MsgObjImage& from);

  inline MsgObjImage& operator=(const MsgObjImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const MsgObjImage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgObjImage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgObjImage* other);

  // implements Message ----------------------------------------------

  MsgObjImage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgObjImage& from);
  void MergeFrom(const MsgObjImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 w = 1;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 1;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // required int32 h = 2;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 2;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // required string url = 3;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // required string thumbnailUrl = 4;
  inline bool has_thumbnailurl() const;
  inline void clear_thumbnailurl();
  static const int kThumbnailUrlFieldNumber = 4;
  inline const ::std::string& thumbnailurl() const;
  inline void set_thumbnailurl(const ::std::string& value);
  inline void set_thumbnailurl(const char* value);
  inline void set_thumbnailurl(const char* value, size_t size);
  inline ::std::string* mutable_thumbnailurl();
  inline ::std::string* release_thumbnailurl();
  inline void set_allocated_thumbnailurl(::std::string* thumbnailurl);

  // @@protoc_insertion_point(class_scope:yunquan.MsgObjImage)
 private:
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_thumbnailurl();
  inline void clear_has_thumbnailurl();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  ::std::string* url_;
  ::std::string* thumbnailurl_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MsgObject_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MsgObject_2eproto();
  #endif
  friend void protobuf_AssignDesc_MsgObject_2eproto();
  friend void protobuf_ShutdownFile_MsgObject_2eproto();

  void InitAsDefaultInstance();
  static MsgObjImage* default_instance_;
};
// -------------------------------------------------------------------

class MsgObjVoice : public ::google::protobuf::MessageLite {
 public:
  MsgObjVoice();
  virtual ~MsgObjVoice();

  MsgObjVoice(const MsgObjVoice& from);

  inline MsgObjVoice& operator=(const MsgObjVoice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const MsgObjVoice& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgObjVoice* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgObjVoice* other);

  // implements Message ----------------------------------------------

  MsgObjVoice* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgObjVoice& from);
  void MergeFrom(const MsgObjVoice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 len = 1;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 1;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);

  // required string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:yunquan.MsgObjVoice)
 private:
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_url();
  inline void clear_has_url();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  ::google::protobuf::int32 len_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MsgObject_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MsgObject_2eproto();
  #endif
  friend void protobuf_AssignDesc_MsgObject_2eproto();
  friend void protobuf_ShutdownFile_MsgObject_2eproto();

  void InitAsDefaultInstance();
  static MsgObjVoice* default_instance_;
};
// -------------------------------------------------------------------

class MsgObjVideo : public ::google::protobuf::MessageLite {
 public:
  MsgObjVideo();
  virtual ~MsgObjVideo();

  MsgObjVideo(const MsgObjVideo& from);

  inline MsgObjVideo& operator=(const MsgObjVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const MsgObjVideo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgObjVideo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgObjVideo* other);

  // implements Message ----------------------------------------------

  MsgObjVideo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgObjVideo& from);
  void MergeFrom(const MsgObjVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 len = 1;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 1;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);

  // required string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:yunquan.MsgObjVideo)
 private:
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_url();
  inline void clear_has_url();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  ::google::protobuf::int32 len_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MsgObject_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MsgObject_2eproto();
  #endif
  friend void protobuf_AssignDesc_MsgObject_2eproto();
  friend void protobuf_ShutdownFile_MsgObject_2eproto();

  void InitAsDefaultInstance();
  static MsgObjVideo* default_instance_;
};
// -------------------------------------------------------------------

class MsgObjLink : public ::google::protobuf::MessageLite {
 public:
  MsgObjLink();
  virtual ~MsgObjLink();

  MsgObjLink(const MsgObjLink& from);

  inline MsgObjLink& operator=(const MsgObjLink& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const MsgObjLink& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgObjLink* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgObjLink* other);

  // implements Message ----------------------------------------------

  MsgObjLink* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgObjLink& from);
  void MergeFrom(const MsgObjLink& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // required string url = 3;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string imageUrl = 4;
  inline bool has_imageurl() const;
  inline void clear_imageurl();
  static const int kImageUrlFieldNumber = 4;
  inline const ::std::string& imageurl() const;
  inline void set_imageurl(const ::std::string& value);
  inline void set_imageurl(const char* value);
  inline void set_imageurl(const char* value, size_t size);
  inline ::std::string* mutable_imageurl();
  inline ::std::string* release_imageurl();
  inline void set_allocated_imageurl(::std::string* imageurl);

  // @@protoc_insertion_point(class_scope:yunquan.MsgObjLink)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_imageurl();
  inline void clear_has_imageurl();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  ::std::string* msg_;
  ::std::string* url_;
  ::std::string* imageurl_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MsgObject_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MsgObject_2eproto();
  #endif
  friend void protobuf_AssignDesc_MsgObject_2eproto();
  friend void protobuf_ShutdownFile_MsgObject_2eproto();

  void InitAsDefaultInstance();
  static MsgObjLink* default_instance_;
};
// -------------------------------------------------------------------

class MsgObjCard : public ::google::protobuf::MessageLite {
 public:
  MsgObjCard();
  virtual ~MsgObjCard();

  MsgObjCard(const MsgObjCard& from);

  inline MsgObjCard& operator=(const MsgObjCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const MsgObjCard& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgObjCard* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgObjCard* other);

  // implements Message ----------------------------------------------

  MsgObjCard* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgObjCard& from);
  void MergeFrom(const MsgObjCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string portrait = 3;
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 3;
  inline const ::std::string& portrait() const;
  inline void set_portrait(const ::std::string& value);
  inline void set_portrait(const char* value);
  inline void set_portrait(const char* value, size_t size);
  inline ::std::string* mutable_portrait();
  inline ::std::string* release_portrait();
  inline void set_allocated_portrait(::std::string* portrait);

  // required string phone = 4;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 4;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // required string company = 5;
  inline bool has_company() const;
  inline void clear_company();
  static const int kCompanyFieldNumber = 5;
  inline const ::std::string& company() const;
  inline void set_company(const ::std::string& value);
  inline void set_company(const char* value);
  inline void set_company(const char* value, size_t size);
  inline ::std::string* mutable_company();
  inline ::std::string* release_company();
  inline void set_allocated_company(::std::string* company);

  // required string title = 6;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 6;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:yunquan.MsgObjCard)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_company();
  inline void clear_has_company();
  inline void set_has_title();
  inline void clear_has_title();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* portrait_;
  ::std::string* phone_;
  ::std::string* company_;
  ::std::string* title_;
  ::google::protobuf::uint32 uid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MsgObject_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MsgObject_2eproto();
  #endif
  friend void protobuf_AssignDesc_MsgObject_2eproto();
  friend void protobuf_ShutdownFile_MsgObject_2eproto();

  void InitAsDefaultInstance();
  static MsgObjCard* default_instance_;
};
// -------------------------------------------------------------------

class MsgObjActivity : public ::google::protobuf::MessageLite {
 public:
  MsgObjActivity();
  virtual ~MsgObjActivity();

  MsgObjActivity(const MsgObjActivity& from);

  inline MsgObjActivity& operator=(const MsgObjActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const MsgObjActivity& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgObjActivity* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgObjActivity* other);

  // implements Message ----------------------------------------------

  MsgObjActivity* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgObjActivity& from);
  void MergeFrom(const MsgObjActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 articleId = 1;
  inline bool has_articleid() const;
  inline void clear_articleid();
  static const int kArticleIdFieldNumber = 1;
  inline ::google::protobuf::int64 articleid() const;
  inline void set_articleid(::google::protobuf::int64 value);

  // required string articleName = 2;
  inline bool has_articlename() const;
  inline void clear_articlename();
  static const int kArticleNameFieldNumber = 2;
  inline const ::std::string& articlename() const;
  inline void set_articlename(const ::std::string& value);
  inline void set_articlename(const char* value);
  inline void set_articlename(const char* value, size_t size);
  inline ::std::string* mutable_articlename();
  inline ::std::string* release_articlename();
  inline void set_allocated_articlename(::std::string* articlename);

  // required int64 userId = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // required string authorName = 4;
  inline bool has_authorname() const;
  inline void clear_authorname();
  static const int kAuthorNameFieldNumber = 4;
  inline const ::std::string& authorname() const;
  inline void set_authorname(const ::std::string& value);
  inline void set_authorname(const char* value);
  inline void set_authorname(const char* value, size_t size);
  inline ::std::string* mutable_authorname();
  inline ::std::string* release_authorname();
  inline void set_allocated_authorname(::std::string* authorname);

  // optional int32 publishTime = 5;
  inline bool has_publishtime() const;
  inline void clear_publishtime();
  static const int kPublishTimeFieldNumber = 5;
  inline ::google::protobuf::int32 publishtime() const;
  inline void set_publishtime(::google::protobuf::int32 value);

  // optional int32 startTime = 6;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::int32 starttime() const;
  inline void set_starttime(::google::protobuf::int32 value);

  // optional int32 stopTime = 7;
  inline bool has_stoptime() const;
  inline void clear_stoptime();
  static const int kStopTimeFieldNumber = 7;
  inline ::google::protobuf::int32 stoptime() const;
  inline void set_stoptime(::google::protobuf::int32 value);

  // required string address = 8;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 8;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional int32 likeCount = 9;
  inline bool has_likecount() const;
  inline void clear_likecount();
  static const int kLikeCountFieldNumber = 9;
  inline ::google::protobuf::int32 likecount() const;
  inline void set_likecount(::google::protobuf::int32 value);

  // optional int32 commentCount = 10;
  inline bool has_commentcount() const;
  inline void clear_commentcount();
  static const int kCommentCountFieldNumber = 10;
  inline ::google::protobuf::int32 commentcount() const;
  inline void set_commentcount(::google::protobuf::int32 value);

  // required string imageUrl = 11;
  inline bool has_imageurl() const;
  inline void clear_imageurl();
  static const int kImageUrlFieldNumber = 11;
  inline const ::std::string& imageurl() const;
  inline void set_imageurl(const ::std::string& value);
  inline void set_imageurl(const char* value);
  inline void set_imageurl(const char* value, size_t size);
  inline ::std::string* mutable_imageurl();
  inline ::std::string* release_imageurl();
  inline void set_allocated_imageurl(::std::string* imageurl);

  // @@protoc_insertion_point(class_scope:yunquan.MsgObjActivity)
 private:
  inline void set_has_articleid();
  inline void clear_has_articleid();
  inline void set_has_articlename();
  inline void clear_has_articlename();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_authorname();
  inline void clear_has_authorname();
  inline void set_has_publishtime();
  inline void clear_has_publishtime();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_stoptime();
  inline void clear_has_stoptime();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_likecount();
  inline void clear_has_likecount();
  inline void set_has_commentcount();
  inline void clear_has_commentcount();
  inline void set_has_imageurl();
  inline void clear_has_imageurl();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 articleid_;
  ::std::string* articlename_;
  ::google::protobuf::int64 userid_;
  ::std::string* authorname_;
  ::google::protobuf::int32 publishtime_;
  ::google::protobuf::int32 starttime_;
  ::std::string* address_;
  ::google::protobuf::int32 stoptime_;
  ::google::protobuf::int32 likecount_;
  ::std::string* imageurl_;
  ::google::protobuf::int32 commentcount_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MsgObject_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MsgObject_2eproto();
  #endif
  friend void protobuf_AssignDesc_MsgObject_2eproto();
  friend void protobuf_ShutdownFile_MsgObject_2eproto();

  void InitAsDefaultInstance();
  static MsgObjActivity* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgObjSystem

// required int32 type = 1;
inline bool MsgObjSystem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgObjSystem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgObjSystem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgObjSystem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MsgObjSystem::type() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjSystem.type)
  return type_;
}
inline void MsgObjSystem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjSystem.type)
}

// required string msg = 2;
inline bool MsgObjSystem::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgObjSystem::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgObjSystem::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgObjSystem::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& MsgObjSystem::msg() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjSystem.msg)
  return *msg_;
}
inline void MsgObjSystem::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjSystem.msg)
}
inline void MsgObjSystem::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjSystem.msg)
}
inline void MsgObjSystem::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjSystem.msg)
}
inline ::std::string* MsgObjSystem::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjSystem.msg)
  return msg_;
}
inline ::std::string* MsgObjSystem::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjSystem::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjSystem.msg)
}

// -------------------------------------------------------------------

// MsgObjText

// required int32 type = 1;
inline bool MsgObjText::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgObjText::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgObjText::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgObjText::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MsgObjText::type() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjText.type)
  return type_;
}
inline void MsgObjText::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjText.type)
}

// required string msg = 2;
inline bool MsgObjText::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgObjText::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgObjText::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgObjText::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& MsgObjText::msg() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjText.msg)
  return *msg_;
}
inline void MsgObjText::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjText.msg)
}
inline void MsgObjText::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjText.msg)
}
inline void MsgObjText::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjText.msg)
}
inline ::std::string* MsgObjText::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjText.msg)
  return msg_;
}
inline ::std::string* MsgObjText::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjText::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjText.msg)
}

// -------------------------------------------------------------------

// MsgObjImage

// required int32 w = 1;
inline bool MsgObjImage::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgObjImage::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgObjImage::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgObjImage::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 MsgObjImage::w() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjImage.w)
  return w_;
}
inline void MsgObjImage::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjImage.w)
}

// required int32 h = 2;
inline bool MsgObjImage::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgObjImage::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgObjImage::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgObjImage::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 MsgObjImage::h() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjImage.h)
  return h_;
}
inline void MsgObjImage::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjImage.h)
}

// required string url = 3;
inline bool MsgObjImage::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgObjImage::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgObjImage::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgObjImage::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& MsgObjImage::url() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjImage.url)
  return *url_;
}
inline void MsgObjImage::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjImage.url)
}
inline void MsgObjImage::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjImage.url)
}
inline void MsgObjImage::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjImage.url)
}
inline ::std::string* MsgObjImage::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjImage.url)
  return url_;
}
inline ::std::string* MsgObjImage::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjImage::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjImage.url)
}

// required string thumbnailUrl = 4;
inline bool MsgObjImage::has_thumbnailurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgObjImage::set_has_thumbnailurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgObjImage::clear_has_thumbnailurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgObjImage::clear_thumbnailurl() {
  if (thumbnailurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbnailurl_->clear();
  }
  clear_has_thumbnailurl();
}
inline const ::std::string& MsgObjImage::thumbnailurl() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjImage.thumbnailUrl)
  return *thumbnailurl_;
}
inline void MsgObjImage::set_thumbnailurl(const ::std::string& value) {
  set_has_thumbnailurl();
  if (thumbnailurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbnailurl_ = new ::std::string;
  }
  thumbnailurl_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjImage.thumbnailUrl)
}
inline void MsgObjImage::set_thumbnailurl(const char* value) {
  set_has_thumbnailurl();
  if (thumbnailurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbnailurl_ = new ::std::string;
  }
  thumbnailurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjImage.thumbnailUrl)
}
inline void MsgObjImage::set_thumbnailurl(const char* value, size_t size) {
  set_has_thumbnailurl();
  if (thumbnailurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbnailurl_ = new ::std::string;
  }
  thumbnailurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjImage.thumbnailUrl)
}
inline ::std::string* MsgObjImage::mutable_thumbnailurl() {
  set_has_thumbnailurl();
  if (thumbnailurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbnailurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjImage.thumbnailUrl)
  return thumbnailurl_;
}
inline ::std::string* MsgObjImage::release_thumbnailurl() {
  clear_has_thumbnailurl();
  if (thumbnailurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = thumbnailurl_;
    thumbnailurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjImage::set_allocated_thumbnailurl(::std::string* thumbnailurl) {
  if (thumbnailurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumbnailurl_;
  }
  if (thumbnailurl) {
    set_has_thumbnailurl();
    thumbnailurl_ = thumbnailurl;
  } else {
    clear_has_thumbnailurl();
    thumbnailurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjImage.thumbnailUrl)
}

// -------------------------------------------------------------------

// MsgObjVoice

// required int32 len = 1;
inline bool MsgObjVoice::has_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgObjVoice::set_has_len() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgObjVoice::clear_has_len() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgObjVoice::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 MsgObjVoice::len() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjVoice.len)
  return len_;
}
inline void MsgObjVoice::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjVoice.len)
}

// required string url = 2;
inline bool MsgObjVoice::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgObjVoice::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgObjVoice::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgObjVoice::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& MsgObjVoice::url() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjVoice.url)
  return *url_;
}
inline void MsgObjVoice::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjVoice.url)
}
inline void MsgObjVoice::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjVoice.url)
}
inline void MsgObjVoice::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjVoice.url)
}
inline ::std::string* MsgObjVoice::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjVoice.url)
  return url_;
}
inline ::std::string* MsgObjVoice::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjVoice::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjVoice.url)
}

// -------------------------------------------------------------------

// MsgObjVideo

// required int32 len = 1;
inline bool MsgObjVideo::has_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgObjVideo::set_has_len() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgObjVideo::clear_has_len() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgObjVideo::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 MsgObjVideo::len() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjVideo.len)
  return len_;
}
inline void MsgObjVideo::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjVideo.len)
}

// required string url = 2;
inline bool MsgObjVideo::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgObjVideo::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgObjVideo::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgObjVideo::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& MsgObjVideo::url() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjVideo.url)
  return *url_;
}
inline void MsgObjVideo::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjVideo.url)
}
inline void MsgObjVideo::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjVideo.url)
}
inline void MsgObjVideo::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjVideo.url)
}
inline ::std::string* MsgObjVideo::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjVideo.url)
  return url_;
}
inline ::std::string* MsgObjVideo::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjVideo::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjVideo.url)
}

// -------------------------------------------------------------------

// MsgObjLink

// required string title = 1;
inline bool MsgObjLink::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgObjLink::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgObjLink::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgObjLink::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& MsgObjLink::title() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjLink.title)
  return *title_;
}
inline void MsgObjLink::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjLink.title)
}
inline void MsgObjLink::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjLink.title)
}
inline void MsgObjLink::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjLink.title)
}
inline ::std::string* MsgObjLink::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjLink.title)
  return title_;
}
inline ::std::string* MsgObjLink::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjLink::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjLink.title)
}

// required string msg = 2;
inline bool MsgObjLink::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgObjLink::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgObjLink::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgObjLink::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& MsgObjLink::msg() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjLink.msg)
  return *msg_;
}
inline void MsgObjLink::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjLink.msg)
}
inline void MsgObjLink::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjLink.msg)
}
inline void MsgObjLink::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjLink.msg)
}
inline ::std::string* MsgObjLink::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjLink.msg)
  return msg_;
}
inline ::std::string* MsgObjLink::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjLink::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjLink.msg)
}

// required string url = 3;
inline bool MsgObjLink::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgObjLink::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgObjLink::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgObjLink::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& MsgObjLink::url() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjLink.url)
  return *url_;
}
inline void MsgObjLink::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjLink.url)
}
inline void MsgObjLink::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjLink.url)
}
inline void MsgObjLink::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjLink.url)
}
inline ::std::string* MsgObjLink::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjLink.url)
  return url_;
}
inline ::std::string* MsgObjLink::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjLink::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjLink.url)
}

// optional string imageUrl = 4;
inline bool MsgObjLink::has_imageurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgObjLink::set_has_imageurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgObjLink::clear_has_imageurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgObjLink::clear_imageurl() {
  if (imageurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imageurl_->clear();
  }
  clear_has_imageurl();
}
inline const ::std::string& MsgObjLink::imageurl() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjLink.imageUrl)
  return *imageurl_;
}
inline void MsgObjLink::set_imageurl(const ::std::string& value) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjLink.imageUrl)
}
inline void MsgObjLink::set_imageurl(const char* value) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjLink.imageUrl)
}
inline void MsgObjLink::set_imageurl(const char* value, size_t size) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjLink.imageUrl)
}
inline ::std::string* MsgObjLink::mutable_imageurl() {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imageurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjLink.imageUrl)
  return imageurl_;
}
inline ::std::string* MsgObjLink::release_imageurl() {
  clear_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imageurl_;
    imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjLink::set_allocated_imageurl(::std::string* imageurl) {
  if (imageurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imageurl_;
  }
  if (imageurl) {
    set_has_imageurl();
    imageurl_ = imageurl;
  } else {
    clear_has_imageurl();
    imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjLink.imageUrl)
}

// -------------------------------------------------------------------

// MsgObjCard

// required uint32 uid = 1;
inline bool MsgObjCard::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgObjCard::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgObjCard::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgObjCard::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 MsgObjCard::uid() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjCard.uid)
  return uid_;
}
inline void MsgObjCard::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjCard.uid)
}

// required string name = 2;
inline bool MsgObjCard::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgObjCard::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgObjCard::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgObjCard::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgObjCard::name() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjCard.name)
  return *name_;
}
inline void MsgObjCard::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjCard.name)
}
inline void MsgObjCard::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjCard.name)
}
inline void MsgObjCard::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjCard.name)
}
inline ::std::string* MsgObjCard::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjCard.name)
  return name_;
}
inline ::std::string* MsgObjCard::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjCard::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjCard.name)
}

// required string portrait = 3;
inline bool MsgObjCard::has_portrait() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgObjCard::set_has_portrait() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgObjCard::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgObjCard::clear_portrait() {
  if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    portrait_->clear();
  }
  clear_has_portrait();
}
inline const ::std::string& MsgObjCard::portrait() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjCard.portrait)
  return *portrait_;
}
inline void MsgObjCard::set_portrait(const ::std::string& value) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjCard.portrait)
}
inline void MsgObjCard::set_portrait(const char* value) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjCard.portrait)
}
inline void MsgObjCard::set_portrait(const char* value, size_t size) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjCard.portrait)
}
inline ::std::string* MsgObjCard::mutable_portrait() {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    portrait_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjCard.portrait)
  return portrait_;
}
inline ::std::string* MsgObjCard::release_portrait() {
  clear_has_portrait();
  if (portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = portrait_;
    portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjCard::set_allocated_portrait(::std::string* portrait) {
  if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete portrait_;
  }
  if (portrait) {
    set_has_portrait();
    portrait_ = portrait;
  } else {
    clear_has_portrait();
    portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjCard.portrait)
}

// required string phone = 4;
inline bool MsgObjCard::has_phone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgObjCard::set_has_phone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgObjCard::clear_has_phone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgObjCard::clear_phone() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& MsgObjCard::phone() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjCard.phone)
  return *phone_;
}
inline void MsgObjCard::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjCard.phone)
}
inline void MsgObjCard::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjCard.phone)
}
inline void MsgObjCard::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjCard.phone)
}
inline ::std::string* MsgObjCard::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjCard.phone)
  return phone_;
}
inline ::std::string* MsgObjCard::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjCard::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjCard.phone)
}

// required string company = 5;
inline bool MsgObjCard::has_company() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgObjCard::set_has_company() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgObjCard::clear_has_company() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgObjCard::clear_company() {
  if (company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_->clear();
  }
  clear_has_company();
}
inline const ::std::string& MsgObjCard::company() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjCard.company)
  return *company_;
}
inline void MsgObjCard::set_company(const ::std::string& value) {
  set_has_company();
  if (company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_ = new ::std::string;
  }
  company_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjCard.company)
}
inline void MsgObjCard::set_company(const char* value) {
  set_has_company();
  if (company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_ = new ::std::string;
  }
  company_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjCard.company)
}
inline void MsgObjCard::set_company(const char* value, size_t size) {
  set_has_company();
  if (company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_ = new ::std::string;
  }
  company_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjCard.company)
}
inline ::std::string* MsgObjCard::mutable_company() {
  set_has_company();
  if (company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjCard.company)
  return company_;
}
inline ::std::string* MsgObjCard::release_company() {
  clear_has_company();
  if (company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = company_;
    company_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjCard::set_allocated_company(::std::string* company) {
  if (company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_;
  }
  if (company) {
    set_has_company();
    company_ = company;
  } else {
    clear_has_company();
    company_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjCard.company)
}

// required string title = 6;
inline bool MsgObjCard::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgObjCard::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgObjCard::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgObjCard::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& MsgObjCard::title() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjCard.title)
  return *title_;
}
inline void MsgObjCard::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjCard.title)
}
inline void MsgObjCard::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjCard.title)
}
inline void MsgObjCard::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjCard.title)
}
inline ::std::string* MsgObjCard::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjCard.title)
  return title_;
}
inline ::std::string* MsgObjCard::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjCard::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjCard.title)
}

// -------------------------------------------------------------------

// MsgObjActivity

// required int64 articleId = 1;
inline bool MsgObjActivity::has_articleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgObjActivity::set_has_articleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgObjActivity::clear_has_articleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgObjActivity::clear_articleid() {
  articleid_ = GOOGLE_LONGLONG(0);
  clear_has_articleid();
}
inline ::google::protobuf::int64 MsgObjActivity::articleid() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjActivity.articleId)
  return articleid_;
}
inline void MsgObjActivity::set_articleid(::google::protobuf::int64 value) {
  set_has_articleid();
  articleid_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjActivity.articleId)
}

// required string articleName = 2;
inline bool MsgObjActivity::has_articlename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgObjActivity::set_has_articlename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgObjActivity::clear_has_articlename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgObjActivity::clear_articlename() {
  if (articlename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    articlename_->clear();
  }
  clear_has_articlename();
}
inline const ::std::string& MsgObjActivity::articlename() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjActivity.articleName)
  return *articlename_;
}
inline void MsgObjActivity::set_articlename(const ::std::string& value) {
  set_has_articlename();
  if (articlename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    articlename_ = new ::std::string;
  }
  articlename_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjActivity.articleName)
}
inline void MsgObjActivity::set_articlename(const char* value) {
  set_has_articlename();
  if (articlename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    articlename_ = new ::std::string;
  }
  articlename_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjActivity.articleName)
}
inline void MsgObjActivity::set_articlename(const char* value, size_t size) {
  set_has_articlename();
  if (articlename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    articlename_ = new ::std::string;
  }
  articlename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjActivity.articleName)
}
inline ::std::string* MsgObjActivity::mutable_articlename() {
  set_has_articlename();
  if (articlename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    articlename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjActivity.articleName)
  return articlename_;
}
inline ::std::string* MsgObjActivity::release_articlename() {
  clear_has_articlename();
  if (articlename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = articlename_;
    articlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjActivity::set_allocated_articlename(::std::string* articlename) {
  if (articlename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete articlename_;
  }
  if (articlename) {
    set_has_articlename();
    articlename_ = articlename;
  } else {
    clear_has_articlename();
    articlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjActivity.articleName)
}

// required int64 userId = 3;
inline bool MsgObjActivity::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgObjActivity::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgObjActivity::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgObjActivity::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 MsgObjActivity::userid() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjActivity.userId)
  return userid_;
}
inline void MsgObjActivity::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjActivity.userId)
}

// required string authorName = 4;
inline bool MsgObjActivity::has_authorname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgObjActivity::set_has_authorname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgObjActivity::clear_has_authorname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgObjActivity::clear_authorname() {
  if (authorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorname_->clear();
  }
  clear_has_authorname();
}
inline const ::std::string& MsgObjActivity::authorname() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjActivity.authorName)
  return *authorname_;
}
inline void MsgObjActivity::set_authorname(const ::std::string& value) {
  set_has_authorname();
  if (authorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorname_ = new ::std::string;
  }
  authorname_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjActivity.authorName)
}
inline void MsgObjActivity::set_authorname(const char* value) {
  set_has_authorname();
  if (authorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorname_ = new ::std::string;
  }
  authorname_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjActivity.authorName)
}
inline void MsgObjActivity::set_authorname(const char* value, size_t size) {
  set_has_authorname();
  if (authorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorname_ = new ::std::string;
  }
  authorname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjActivity.authorName)
}
inline ::std::string* MsgObjActivity::mutable_authorname() {
  set_has_authorname();
  if (authorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjActivity.authorName)
  return authorname_;
}
inline ::std::string* MsgObjActivity::release_authorname() {
  clear_has_authorname();
  if (authorname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authorname_;
    authorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjActivity::set_allocated_authorname(::std::string* authorname) {
  if (authorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authorname_;
  }
  if (authorname) {
    set_has_authorname();
    authorname_ = authorname;
  } else {
    clear_has_authorname();
    authorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjActivity.authorName)
}

// optional int32 publishTime = 5;
inline bool MsgObjActivity::has_publishtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgObjActivity::set_has_publishtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgObjActivity::clear_has_publishtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgObjActivity::clear_publishtime() {
  publishtime_ = 0;
  clear_has_publishtime();
}
inline ::google::protobuf::int32 MsgObjActivity::publishtime() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjActivity.publishTime)
  return publishtime_;
}
inline void MsgObjActivity::set_publishtime(::google::protobuf::int32 value) {
  set_has_publishtime();
  publishtime_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjActivity.publishTime)
}

// optional int32 startTime = 6;
inline bool MsgObjActivity::has_starttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgObjActivity::set_has_starttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgObjActivity::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgObjActivity::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline ::google::protobuf::int32 MsgObjActivity::starttime() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjActivity.startTime)
  return starttime_;
}
inline void MsgObjActivity::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjActivity.startTime)
}

// optional int32 stopTime = 7;
inline bool MsgObjActivity::has_stoptime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgObjActivity::set_has_stoptime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgObjActivity::clear_has_stoptime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgObjActivity::clear_stoptime() {
  stoptime_ = 0;
  clear_has_stoptime();
}
inline ::google::protobuf::int32 MsgObjActivity::stoptime() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjActivity.stopTime)
  return stoptime_;
}
inline void MsgObjActivity::set_stoptime(::google::protobuf::int32 value) {
  set_has_stoptime();
  stoptime_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjActivity.stopTime)
}

// required string address = 8;
inline bool MsgObjActivity::has_address() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgObjActivity::set_has_address() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgObjActivity::clear_has_address() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgObjActivity::clear_address() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& MsgObjActivity::address() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjActivity.address)
  return *address_;
}
inline void MsgObjActivity::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjActivity.address)
}
inline void MsgObjActivity::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjActivity.address)
}
inline void MsgObjActivity::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjActivity.address)
}
inline ::std::string* MsgObjActivity::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjActivity.address)
  return address_;
}
inline ::std::string* MsgObjActivity::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjActivity::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjActivity.address)
}

// optional int32 likeCount = 9;
inline bool MsgObjActivity::has_likecount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgObjActivity::set_has_likecount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgObjActivity::clear_has_likecount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgObjActivity::clear_likecount() {
  likecount_ = 0;
  clear_has_likecount();
}
inline ::google::protobuf::int32 MsgObjActivity::likecount() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjActivity.likeCount)
  return likecount_;
}
inline void MsgObjActivity::set_likecount(::google::protobuf::int32 value) {
  set_has_likecount();
  likecount_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjActivity.likeCount)
}

// optional int32 commentCount = 10;
inline bool MsgObjActivity::has_commentcount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgObjActivity::set_has_commentcount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgObjActivity::clear_has_commentcount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgObjActivity::clear_commentcount() {
  commentcount_ = 0;
  clear_has_commentcount();
}
inline ::google::protobuf::int32 MsgObjActivity::commentcount() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjActivity.commentCount)
  return commentcount_;
}
inline void MsgObjActivity::set_commentcount(::google::protobuf::int32 value) {
  set_has_commentcount();
  commentcount_ = value;
  // @@protoc_insertion_point(field_set:yunquan.MsgObjActivity.commentCount)
}

// required string imageUrl = 11;
inline bool MsgObjActivity::has_imageurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MsgObjActivity::set_has_imageurl() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MsgObjActivity::clear_has_imageurl() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MsgObjActivity::clear_imageurl() {
  if (imageurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imageurl_->clear();
  }
  clear_has_imageurl();
}
inline const ::std::string& MsgObjActivity::imageurl() const {
  // @@protoc_insertion_point(field_get:yunquan.MsgObjActivity.imageUrl)
  return *imageurl_;
}
inline void MsgObjActivity::set_imageurl(const ::std::string& value) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(value);
  // @@protoc_insertion_point(field_set:yunquan.MsgObjActivity.imageUrl)
}
inline void MsgObjActivity::set_imageurl(const char* value) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:yunquan.MsgObjActivity.imageUrl)
}
inline void MsgObjActivity::set_imageurl(const char* value, size_t size) {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imageurl_ = new ::std::string;
  }
  imageurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yunquan.MsgObjActivity.imageUrl)
}
inline ::std::string* MsgObjActivity::mutable_imageurl() {
  set_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imageurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:yunquan.MsgObjActivity.imageUrl)
  return imageurl_;
}
inline ::std::string* MsgObjActivity::release_imageurl() {
  clear_has_imageurl();
  if (imageurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imageurl_;
    imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgObjActivity::set_allocated_imageurl(::std::string* imageurl) {
  if (imageurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imageurl_;
  }
  if (imageurl) {
    set_has_imageurl();
    imageurl_ = imageurl;
  } else {
    clear_has_imageurl();
    imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:yunquan.MsgObjActivity.imageUrl)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace yunquan

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MsgObject_2eproto__INCLUDED
