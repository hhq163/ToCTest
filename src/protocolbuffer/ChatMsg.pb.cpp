// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChatMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace yunquan {

void protobuf_ShutdownFile_ChatMsg_2eproto() {
  delete ChatMsg::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ChatMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ChatMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::yunquan::protobuf_AddDesc_MsgObject_2eproto();
  ChatMsg::default_instance_ = new ChatMsg();
  ChatMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChatMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ChatMsg_2eproto_once_);
void protobuf_AddDesc_ChatMsg_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ChatMsg_2eproto_once_,
                 &protobuf_AddDesc_ChatMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChatMsg_2eproto {
  StaticDescriptorInitializer_ChatMsg_2eproto() {
    protobuf_AddDesc_ChatMsg_2eproto();
  }
} static_descriptor_initializer_ChatMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ChatMsg::kFromUidFieldNumber;
const int ChatMsg::kMsgidFieldNumber;
const int ChatMsg::kTimeFieldNumber;
const int ChatMsg::kSyncKeyFieldNumber;
const int ChatMsg::kTypeFieldNumber;
const int ChatMsg::kNameFieldNumber;
const int ChatMsg::kSessionIdFieldNumber;
const int ChatMsg::kObjSystemFieldNumber;
const int ChatMsg::kObjTextFieldNumber;
const int ChatMsg::kObjImageFieldNumber;
const int ChatMsg::kObjVoiceFieldNumber;
const int ChatMsg::kObjVideoFieldNumber;
const int ChatMsg::kObjLinkFieldNumber;
const int ChatMsg::kObjCardFieldNumber;
#endif  // !_MSC_VER

ChatMsg::ChatMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yunquan.ChatMsg)
}

void ChatMsg::InitAsDefaultInstance() {
}

ChatMsg::ChatMsg(const ChatMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yunquan.ChatMsg)
}

void ChatMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fromuid_ = 0u;
  msgid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  synckey_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_msgObjectOneof();
}

ChatMsg::~ChatMsg() {
  // @@protoc_insertion_point(destructor:yunquan.ChatMsg)
  SharedDtor();
}

void ChatMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (has_msgObjectOneof()) {
    clear_msgObjectOneof();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChatMsg& ChatMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ChatMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ChatMsg_2eproto();
#endif
  return *default_instance_;
}

ChatMsg* ChatMsg::default_instance_ = NULL;

ChatMsg* ChatMsg::New() const {
  return new ChatMsg;
}

void ChatMsg::clear_msgObjectOneof() {
  switch(msgObjectOneof_case()) {
    case kObjSystem: {
      delete msgObjectOneof_.objsystem_;
      break;
    }
    case kObjText: {
      delete msgObjectOneof_.objtext_;
      break;
    }
    case kObjImage: {
      delete msgObjectOneof_.objimage_;
      break;
    }
    case kObjVoice: {
      delete msgObjectOneof_.objvoice_;
      break;
    }
    case kObjVideo: {
      delete msgObjectOneof_.objvideo_;
      break;
    }
    case kObjLink: {
      delete msgObjectOneof_.objlink_;
      break;
    }
    case kObjCard: {
      delete msgObjectOneof_.objcard_;
      break;
    }
    case MSGOBJECTONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSGOBJECTONEOF_NOT_SET;
}


void ChatMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(msgid_, synckey_);
    ZR_(type_, sessionid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_msgObjectOneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:yunquan.ChatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fromUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromuid_)));
          set_has_fromuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }

      // required uint64 msgid = 2;
      case 2: {
        if (tag == 16) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_syncKey;
        break;
      }

      // optional int64 syncKey = 4;
      case 4: {
        if (tag == 32) {
         parse_syncKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &synckey_)));
          set_has_synckey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }

      // required .yunquan.E_MSG_OBJECT_TYPE Type = 5;
      case 5: {
        if (tag == 40) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::yunquan::E_MSG_OBJECT_TYPE_IsValid(value)) {
            set_type(static_cast< ::yunquan::E_MSG_OBJECT_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_objSystem;
        break;
      }

      // optional .yunquan.MsgObjSystem objSystem = 6;
      case 6: {
        if (tag == 50) {
         parse_objSystem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objsystem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_objText;
        break;
      }

      // optional .yunquan.MsgObjText objText = 7;
      case 7: {
        if (tag == 58) {
         parse_objText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objtext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_objImage;
        break;
      }

      // optional .yunquan.MsgObjImage objImage = 8;
      case 8: {
        if (tag == 66) {
         parse_objImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objimage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_objVoice;
        break;
      }

      // optional .yunquan.MsgObjVoice objVoice = 9;
      case 9: {
        if (tag == 74) {
         parse_objVoice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objvoice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_objVideo;
        break;
      }

      // optional .yunquan.MsgObjVideo objVideo = 10;
      case 10: {
        if (tag == 82) {
         parse_objVideo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objvideo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_objLink;
        break;
      }

      // optional .yunquan.MsgObjLink objLink = 11;
      case 11: {
        if (tag == 90) {
         parse_objLink:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objlink()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_objCard;
        break;
      }

      // optional .yunquan.MsgObjCard objCard = 12;
      case 12: {
        if (tag == 98) {
         parse_objCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_name;
        break;
      }

      // optional string name = 13;
      case 13: {
        if (tag == 106) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_sessionId;
        break;
      }

      // optional uint32 sessionId = 14;
      case 14: {
        if (tag == 112) {
         parse_sessionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yunquan.ChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yunquan.ChatMsg)
  return false;
#undef DO_
}

void ChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yunquan.ChatMsg)
  // required uint32 fromUid = 1;
  if (has_fromuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromuid(), output);
  }

  // required uint64 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msgid(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional int64 syncKey = 4;
  if (has_synckey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->synckey(), output);
  }

  // required .yunquan.E_MSG_OBJECT_TYPE Type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .yunquan.MsgObjSystem objSystem = 6;
  if (has_objsystem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->objsystem(), output);
  }

  // optional .yunquan.MsgObjText objText = 7;
  if (has_objtext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->objtext(), output);
  }

  // optional .yunquan.MsgObjImage objImage = 8;
  if (has_objimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->objimage(), output);
  }

  // optional .yunquan.MsgObjVoice objVoice = 9;
  if (has_objvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->objvoice(), output);
  }

  // optional .yunquan.MsgObjVideo objVideo = 10;
  if (has_objvideo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->objvideo(), output);
  }

  // optional .yunquan.MsgObjLink objLink = 11;
  if (has_objlink()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->objlink(), output);
  }

  // optional .yunquan.MsgObjCard objCard = 12;
  if (has_objcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->objcard(), output);
  }

  // optional string name = 13;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->name(), output);
  }

  // optional uint32 sessionId = 14;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->sessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:yunquan.ChatMsg)
}

int ChatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 fromUid = 1;
    if (has_fromuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromuid());
    }

    // required uint64 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgid());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional int64 syncKey = 4;
    if (has_synckey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->synckey());
    }

    // required .yunquan.E_MSG_OBJECT_TYPE Type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 13;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 sessionId = 14;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

  }
  switch (msgObjectOneof_case()) {
    // optional .yunquan.MsgObjSystem objSystem = 6;
    case kObjSystem: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objsystem());
      break;
    }
    // optional .yunquan.MsgObjText objText = 7;
    case kObjText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objtext());
      break;
    }
    // optional .yunquan.MsgObjImage objImage = 8;
    case kObjImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objimage());
      break;
    }
    // optional .yunquan.MsgObjVoice objVoice = 9;
    case kObjVoice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objvoice());
      break;
    }
    // optional .yunquan.MsgObjVideo objVideo = 10;
    case kObjVideo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objvideo());
      break;
    }
    // optional .yunquan.MsgObjLink objLink = 11;
    case kObjLink: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objlink());
      break;
    }
    // optional .yunquan.MsgObjCard objCard = 12;
    case kObjCard: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objcard());
      break;
    }
    case MSGOBJECTONEOF_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChatMsg*>(&from));
}

void ChatMsg::MergeFrom(const ChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.msgObjectOneof_case()) {
    case kObjSystem: {
      mutable_objsystem()->::yunquan::MsgObjSystem::MergeFrom(from.objsystem());
      break;
    }
    case kObjText: {
      mutable_objtext()->::yunquan::MsgObjText::MergeFrom(from.objtext());
      break;
    }
    case kObjImage: {
      mutable_objimage()->::yunquan::MsgObjImage::MergeFrom(from.objimage());
      break;
    }
    case kObjVoice: {
      mutable_objvoice()->::yunquan::MsgObjVoice::MergeFrom(from.objvoice());
      break;
    }
    case kObjVideo: {
      mutable_objvideo()->::yunquan::MsgObjVideo::MergeFrom(from.objvideo());
      break;
    }
    case kObjLink: {
      mutable_objlink()->::yunquan::MsgObjLink::MergeFrom(from.objlink());
      break;
    }
    case kObjCard: {
      mutable_objcard()->::yunquan::MsgObjCard::MergeFrom(from.objcard());
      break;
    }
    case MSGOBJECTONEOF_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromuid()) {
      set_fromuid(from.fromuid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_synckey()) {
      set_synckey(from.synckey());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ChatMsg::CopyFrom(const ChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (has_objsystem()) {
    if (!this->objsystem().IsInitialized()) return false;
  }
  if (has_objtext()) {
    if (!this->objtext().IsInitialized()) return false;
  }
  if (has_objimage()) {
    if (!this->objimage().IsInitialized()) return false;
  }
  if (has_objvoice()) {
    if (!this->objvoice().IsInitialized()) return false;
  }
  if (has_objvideo()) {
    if (!this->objvideo().IsInitialized()) return false;
  }
  if (has_objlink()) {
    if (!this->objlink().IsInitialized()) return false;
  }
  if (has_objcard()) {
    if (!this->objcard().IsInitialized()) return false;
  }
  return true;
}

void ChatMsg::Swap(ChatMsg* other) {
  if (other != this) {
    std::swap(fromuid_, other->fromuid_);
    std::swap(msgid_, other->msgid_);
    std::swap(time_, other->time_);
    std::swap(synckey_, other->synckey_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(msgObjectOneof_, other->msgObjectOneof_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChatMsg::GetTypeName() const {
  return "yunquan.ChatMsg";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace yunquan

// @@protoc_insertion_point(global_scope)
